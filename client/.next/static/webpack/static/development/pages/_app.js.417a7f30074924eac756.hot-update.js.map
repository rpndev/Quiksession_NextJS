{"version":3,"file":"static/webpack/static\\development\\pages\\_app.js.417a7f30074924eac756.hot-update.js","sources":["webpack:///./components/Header.js"],"sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport quiksessionLogo from \"../public/img/quiksession-logo.png\";\r\nimport styles from \"./Header.module.css\";\r\nimport { stripeLink, stripeBalance } from \"../services\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nexport default function Header(props) {\r\n  const [isAuthenticated, setAuthenticated] = useState(false);\r\n  const [role, setRole] = useState(null);\r\n  const [credit, setCredit] = useState(0);\r\n  const [balance, setBalance] = useState(0);\r\n  let formattedBalance = \"\";\r\n\r\n  useEffect(() => {\r\n    const auth = JSON.parse(localStorage.getItem(\"auth\"));\r\n    let role = null;\r\n    if (auth) {\r\n      role = auth.user.role;\r\n      setRole(role);\r\n      setCredit(auth.user.credit);\r\n      setAuthenticated(true);\r\n      const fetchStripeBalance = async () => {\r\n        // const newBalance = await stripeBalance({ userId: auth.user.id });\r\n        // setBalance(newBalance);\r\n      };\r\n      fetchStripeBalance();\r\n    } else {\r\n      setAuthenticated(false);\r\n    }\r\n  }, []);\r\n\r\n  if (balance) {\r\n    const locale = new Intl.NumberFormat().resolvedOptions().locale;\r\n    const formatter = new Intl.NumberFormat(locale, {\r\n      style: \"currency\",\r\n      currency: balance.currency,\r\n    });\r\n\r\n    formattedBalance = formatter.format(balance.amount / 100);\r\n  }\r\n  async function handleStripeLink() {\r\n    const auth = JSON.parse(localStorage.getItem(\"auth\"));\r\n    const req = await stripeLink({ userId: auth.user.id });\r\n    window.open(req.url);\r\n  }\r\n  const renderContent = () => {\r\n    if (!isAuthenticated) {\r\n      return (\r\n        <Fragment>\r\n          <Link href=\"/login\">\r\n            <Button color=\"inherit\">Login</Button>\r\n          </Link>\r\n          <Link href=\"/register\">\r\n            <Button color=\"inherit\">Register</Button>\r\n          </Link>\r\n          <Link href=\"/auth/google\">\r\n            <Button color=\"inherit\">Login With Google</Button>\r\n          </Link>\r\n        </Fragment>\r\n      );\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <Link href=\"/User/studios\">\r\n            <Button color=\"inherit\">{role}</Button>\r\n          </Link>\r\n          {role === \"artist\" && (\r\n            <>\r\n              <Button\r\n                id=\"payout\"\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  props.handleModal();\r\n                }}\r\n              >\r\n                Add Credit\r\n              </Button>\r\n              <span id=\"credits\" key=\"3\" style={{ margin: \"0 20px\" }}>\r\n                Credits: {credit}\r\n              </span>\r\n            </>\r\n          )}\r\n          {role === \"owner\" && (\r\n            <>\r\n              <Button\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={() => {\r\n                  handleStripeLink();\r\n                }}\r\n              >\r\n                See Payouts â†—\r\n              </Button>\r\n              <span className=\"balance\">{formattedBalance} </span>\r\n            </>\r\n          )}\r\n\r\n          <Link href=\"/logout\">\r\n            <Button color=\"inherit\">Logout</Button>\r\n          </Link>\r\n        </Fragment>\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Link href={isAuthenticated ? \"/User\" : \"/\"}>\r\n          <a style={{ flexGrow: 1 }}>\r\n            <img\r\n              src={quiksessionLogo}\r\n              className={styles.brandLogoImage}\r\n              alt=\"Quiksession Logo\"\r\n            />\r\n          </a>\r\n        </Link>\r\n\r\n        {renderContent()}\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAKA;AACA;AACA;AAlCA;AAAA;AAAA;AACA;AADA;AAAA;AAkCA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAEA;AAAA;AACA;AAHA;AAEA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAlCA;AAAA;AACA;AAsCA;AACA;AACA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAIA;AACA;AAEA;AAAA;AACA;AAAA;AAKA;AACA;AACA;AACA;AACA;AACA;AANA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AACA;AACA;AACA;AALA;AASA;AAAA;AAIA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAYA;;;;A","sourceRoot":""}