{"version":3,"file":"static/webpack/static\\development\\pages\\User\\studios.js.4438470a2d676ce5eb39.hot-update.js","sources":["webpack:///./pages/User/studios.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Link from \"next/link\";\r\nimport { withStyles, makeStyles } from \"@material-ui/core/styles\";\r\nimport {\r\n  Dialog,\r\n  Typography,\r\n  Table,\r\n  TableBody,\r\n  TableCell,\r\n  TableContainer,\r\n  TableHead,\r\n  TableRow,\r\n  Paper,\r\n  Box,\r\n  Button,\r\n  Container,\r\n  IconButton,\r\n} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport DeleteIcon from \"@material-ui/icons/DeleteOutlined\";\r\nimport EditIcon from \"@material-ui/icons/Edit\";\r\n\r\nimport StudioAddDialog from \"../../components/studio/StudioAddDialog\";\r\nimport { StudioFormProvider } from \"../../components/studio/StudioContext\";\r\nimport { fetchStudios, deleteStudio, getStudio } from \"../../services\";\r\nconst StyledTableCell = withStyles((theme) => ({\r\n  head: {\r\n    backgroundColor: theme.palette.common.black,\r\n    color: theme.palette.common.white,\r\n  },\r\n  body: {\r\n    fontSize: 14,\r\n  },\r\n}))(TableCell);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  table: {\r\n    minWidth: 650,\r\n  },\r\n  container: {\r\n    marginTop: theme.spacing(8),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  closeButton: {\r\n    cursor: \"pointer\",\r\n    position: \"absolute\",\r\n    right: theme.spacing(1 / 2),\r\n    top: theme.spacing(1 / 2),\r\n    color: theme.palette.grey[500],\r\n  },\r\n}));\r\n\r\nexport default function Studios() {\r\n  const classes = useStyles();\r\n  const [studios, setStudios] = useState([]);\r\n  const [fetchError, setFetchError] = useState(null);\r\n  const [role, setRole] = useState(null);\r\n  const [open, setOpen] = useState(false);\r\n  const [initialState, setInitialState] = useState({});\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        const data = await fetchStudios();\r\n        const auth = JSON.parse(localStorage.getItem(\"auth\"));\r\n        let role = null;\r\n        console.log(\"This is auth\", auth);\r\n        if (auth && auth.user) {\r\n          role = auth.user.role;\r\n          setRole(role);\r\n          if (auth.user.role === \"owner\") {\r\n            let temp = data.map((item) => {\r\n              if (item.owner.id === auth.user.id) return item;\r\n            });\r\n            setStudios(temp);\r\n            return;\r\n          }\r\n        }\r\n\r\n        setStudios(data);\r\n      } catch (e) {\r\n        setFetchError(e.message);\r\n      }\r\n    };\r\n    fetchData();\r\n  }, [open]);\r\n\r\n  function handleConfirm() {\r\n    setOpen(false);\r\n  }\r\n\r\n  function handleOnOpen(isFlag) {\r\n    if (isFlag) {\r\n      setInitialState({\r\n        studioInfo: {},\r\n        roomInfo: [],\r\n        equipInfo: [],\r\n        serviceInfo: [],\r\n        engineerInfo: [],\r\n        studioId: -1,\r\n        isSubmit: false,\r\n      });\r\n    }\r\n    setOpen(true);\r\n  }\r\n  const onEditStudio = async (studioId) => {\r\n    try {\r\n      const data = await getStudio(studioId);\r\n      const studioInfo = {\r\n        name: data.name,\r\n        address: data.address,\r\n        phoneNumber: data.phoneNumber,\r\n        file: data.file,\r\n        roomType: data.roomType,\r\n      };\r\n      const roomInfo = data.room;\r\n      const engineerInfo = data.engineer;\r\n      const serviceInfo = data.service;\r\n      const equipInfo = data.equip;\r\n      setInitialState({\r\n        studioInfo,\r\n        roomInfo,\r\n        serviceInfo,\r\n        equipInfo,\r\n        engineerInfo,\r\n        studioId,\r\n      });\r\n      handleOnOpen(false);\r\n    } catch (e) {\r\n      setFetchError(e.message);\r\n    }\r\n  };\r\n\r\n  const onDelete = async (studioId) => {\r\n    if (window.confirm(\"Are you sure you want to delete this studio?\")) {\r\n      try {\r\n        await deleteStudio(studioId);\r\n        fetchData();\r\n      } catch (e) {}\r\n    }\r\n  };\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xl\" className={classes.container}>\r\n      <TableContainer component={Paper}>\r\n        <React.Fragment>\r\n          {role === \"owner\" && (\r\n            <Box display=\"flex\" justifyContent=\"flex-end\" m={1} p={1}>\r\n              <Button\r\n                color=\"secondary\"\r\n                variant=\"contained\"\r\n                // component={Link}\r\n                onClick={() => {\r\n                  // handleOnOpen(true);\r\n                }}\r\n              >\r\n                ADD NEW BUSINESS\r\n              </Button>\r\n            </Box>\r\n          )}\r\n          <Dialog open={open} fullWidth={true} maxWidth={\"md\"}>\r\n            <StudioFormProvider initialState={initialState}>\r\n              <StudioAddDialog onConfirm={handleConfirm} />\r\n            </StudioFormProvider>\r\n            <IconButton aria-label=\"Close\" className={classes.closeButton}>\r\n              <CloseIcon\r\n                onClick={() => {\r\n                  setOpen(false);\r\n                }}\r\n              />\r\n            </IconButton>\r\n          </Dialog>\r\n          <Table className={classes.table} aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <StyledTableCell>Name</StyledTableCell>\r\n                <StyledTableCell>Address</StyledTableCell>\r\n                <StyledTableCell>PhoneNumber</StyledTableCell>\r\n                <StyledTableCell>Price</StyledTableCell>\r\n                <StyledTableCell>Owner</StyledTableCell>\r\n                <StyledTableCell size=\"small\" align=\"center\">\r\n                  Actions\r\n                </StyledTableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {studios.map(\r\n                (studio) =>\r\n                  studio && (\r\n                    <TableRow key={studio.id}>\r\n                      <StyledTableCell>{studio.name}</StyledTableCell>\r\n                      <StyledTableCell>{studio.address}</StyledTableCell>\r\n                      <StyledTableCell>{studio.phoneNumber}</StyledTableCell>\r\n                      <StyledTableCell>${studio.price}</StyledTableCell>\r\n                      <StyledTableCell>{studio.owner.name}</StyledTableCell>\r\n                      {role === \"owner\" ? (\r\n                        <StyledTableCell size=\"small\" align=\"center\">\r\n                          <IconButton\r\n                            aria-label=\"edit\"\r\n                            // component={Link}\r\n                            onClick={() => {\r\n                              onEditStudio(studio.id);\r\n                            }}\r\n                          >\r\n                            <EditIcon fontSize=\"inherit\" />\r\n                          </IconButton>\r\n\r\n                          <IconButton\r\n                            aria-label=\"delete\"\r\n                            onClick={() => {\r\n                              onDelete(studio.id);\r\n                            }}\r\n                          >\r\n                            <DeleteIcon fontSize=\"inherit\" />\r\n                          </IconButton>\r\n                        </StyledTableCell>\r\n                      ) : (\r\n                        <StyledTableCell size=\"small\" align=\"center\">\r\n                          <Link\r\n                            href={{\r\n                              pathname: \"/Booking\",\r\n                              query: { studioId: studio.id },\r\n                            }}\r\n                          >\r\n                            <Button variant=\"contained\" color=\"secondary\">\r\n                              Book\r\n                            </Button>\r\n                          </Link>\r\n                        </StyledTableCell>\r\n                      )}\r\n                    </TableRow>\r\n                  )\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n          {fetchError && (\r\n            <Typography variant=\"body2\" color=\"error\">\r\n              {fetchError}\r\n            </Typography>\r\n          )}\r\n        </React.Fragment>\r\n      </TableContainer>\r\n    </Container>\r\n  );\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAeA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AADA;AALA;AAAA;AAUA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AACA;AACA;AALA;AAVA;AAAA;AAmBA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AATA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AACA;AACA;AAbA;AACA;AADA;AAkBA;AAlBA;AAAA;AACA;AADA;AAAA;AAAA;AAoBA;AACA;AArBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAsBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AASA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAtBA;AAAA;AACA;AADA;AAAA;AAAA;AAwBA;AACA;AAzBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA2BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAIA;AAJA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAOA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAFA;AAIA;AAEA;AANA;AAYA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAOA;AAAA;AAAA;AAQA;AAAA;AAAA;AAOA;AAEA;AAAA;AAOA;AAAA;AAAA;AAEA;AADA;AAGA;AACA;AACA;AALA;AAOA;AAAA;AAIA;AACA;AACA;AACA;AAJA;AAMA;AAAA;AAIA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAFA;AADA;AAMA;AAAA;AAAA;AArCA;AAiDA;AAAA;AAAA;AAQA;;;;A","sourceRoot":""}